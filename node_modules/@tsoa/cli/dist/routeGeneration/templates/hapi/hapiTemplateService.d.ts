import { Request as HRequest, ResponseToolkit as HResponse } from '@hapi/hapi';
import { Controller, TsoaRoute } from '@tsoa/runtime';
import { TemplateService } from '../templateService';
type HapiApiHandlerParameters = {
    methodName: string;
    controller: Controller | Object;
    h: HResponse;
    validatedArgs: any[];
    successStatus?: number;
};
type HapiValidationArgsParameters = {
    args: Record<string, TsoaRoute.ParameterSchema>;
    request: HRequest;
    h: HResponse;
};
type HapiReturnHandlerParameters = {
    h: HResponse;
    headers: any;
    statusCode?: number;
    data?: any;
};
export declare class HapiTemplateService extends TemplateService<HapiApiHandlerParameters, HapiValidationArgsParameters, HapiReturnHandlerParameters> {
    readonly models: any;
    private readonly minimalSwaggerConfig;
    constructor(models: any, minimalSwaggerConfig: any);
    apiHandler(params: HapiApiHandlerParameters): Promise<any>;
    getValidatedArgs(params: HapiValidationArgsParameters): any[];
    protected returnHandler(params: HapiReturnHandlerParameters): any;
}
export {};
